import { useCallback, useEffect, useRef, useState } from "react";
import { NavLink } from "react-router-dom";
import { ContactSection } from "../components/ContactSection";
import { FooterBar } from "../components/FooterBar";

// Optimized WebP: small and large (generated by scripts/optimize-with-sharp.mjs)
import smAufbruchI from "../assets/optimized/sm/AufbruchI-web.webp";
import lgAufbruchI from "../assets/optimized/lg/AufbruchI-web.webp";
import smAufbruchII from "../assets/optimized/sm/AufbruchII-web.webp";
import lgAufbruchII from "../assets/optimized/lg/AufbruchII-web.webp";
import smEismeer from "../assets/optimized/sm/Eismeer-web.webp";
import lgEismeer from "../assets/optimized/lg/Eismeer-web.webp";
import smFruehling from "../assets/optimized/sm/Fruehling-web.webp";
import lgFruehling from "../assets/optimized/lg/Fruehling-web.webp";
import smKuechenphilosophie from "../assets/optimized/sm/Küchenphilosophie-web.webp";
import lgKuechenphilosophie from "../assets/optimized/lg/Küchenphilosophie-web.webp";
import smOhneTitelA from "../assets/optimized/sm/ohneTitel-a-web.webp";
import lgOhneTitelA from "../assets/optimized/lg/ohneTitel-a-web.webp";
import smOhneTitel1 from "../assets/optimized/sm/ohneTitel1-web.webp";
import lgOhneTitel1 from "../assets/optimized/lg/ohneTitel1-web.webp";
import smOhneTitelB from "../assets/optimized/sm/ohneTitelb-web.webp";
import lgOhneTitelB from "../assets/optimized/lg/ohneTitelb-web.webp";
import smPower from "../assets/optimized/sm/power-web.webp";
import lgPower from "../assets/optimized/lg/power-web.webp";
import smSonnenblumen from "../assets/optimized/sm/Sonnenblumen-web.webp";
import lgSonnenblumen from "../assets/optimized/lg/Sonnenblumen-web.webp";
import smSpuren from "../assets/optimized/sm/Spuren-web.webp";
import lgSpuren from "../assets/optimized/lg/Spuren-web.webp";
import smTanzendeA from "../assets/optimized/sm/Tanzende-a-web.webp";
import lgTanzendeA from "../assets/optimized/lg/Tanzende-a-web.webp";
import smTanzendeB from "../assets/optimized/sm/Tanzende-b-web.webp";
import lgTanzendeB from "../assets/optimized/lg/Tanzende-b-web.webp";
import smZaghaft from "../assets/optimized/sm/Zaghaft-beginnt-etwas-Neues-web.webp";
import lgZaghaft from "../assets/optimized/lg/Zaghaft-beginnt-etwas-Neues-web.webp";

const navLinks = [
  // Use the route paths declared in src/index.tsx
  { label: "Ausstellungen", href: "/exhibitions" },
  { label: "Über mich", href: "/about-me" },
  { label: "Kontakt", href: "/contact" }
];

type Artwork = {
  id: number;
  smallSrc: string; // webp small variant for page
  largeSrc: string; // webp large variant for lightbox
  alt: string;
  title: string;
  year: string;
  dimensions: string;
  groupId?: string;
  img: { w: number; h: number; top: number; left: number };
  caption?: { w?: number; top: number; left: number; align?: "right" | "left" };
};

const artworks: Artwork[] = [
  // Restore the vertical position of the first artwork so it sits closer to the header like before
  { id: 1, smallSrc: smAufbruchI, largeSrc: lgAufbruchI, alt: "Aufbruch I", title: "Aufbruch I", year: "2022", dimensions: "70 x 60 cm", img: { w: 706, h: 600, top: 232, left: 31 }, caption: { w: 196, top: 316, left: 812 } },
  { id: 2, smallSrc: smFruehling, largeSrc: lgFruehling, alt: "Frühling", title: "Frühling", year: "2020", dimensions: "70 x 70 cm", img: { w: 491, h: 486, top: 647, left: 918 }, caption: { w: 196, top: 965, left: 704, align: "right" } },
  { id: 3, smallSrc: smEismeer, largeSrc: lgEismeer, alt: "Eismeer", title: "Eismeer", year: "2020", dimensions: "80 x 40 cm", img: { w: 1202, h: 600, top: 1166, left: 68 }, caption: { w: 196, top: 1409, left: 1291 } },
  { id: 4, smallSrc: smZaghaft, largeSrc: lgZaghaft, alt: "Zaghaft beginnt etwas Neues", title: "Zaghaft beginnt etwas Neues", year: "2021", dimensions: "70 x 70 cm", img: { w: 511, h: 499, top: 1839, left: 13 }, caption: { w: 196, top: 1918, left: 566 } },
  { id: 5, smallSrc: smPower, largeSrc: lgPower, alt: "power", title: "power", year: "2021", dimensions: "70 x 70 cm", img: { w: 566, h: 600, top: 2010, left: 843 }, caption: { w: 196, top: 2435, left: 639, align: "right" } },
  { id: 6, smallSrc: smTanzendeA, largeSrc: lgTanzendeA, alt: "Tanzende", title: "Tanzende", year: "2024", dimensions: "je 80 x 40 cm", groupId: "tanzende", img: { w: 297, h: 600, top: 2610, left: 120 }, caption: { w: 196, top: 2840, left: 861 } },
  { id: 7, smallSrc: smTanzendeB, largeSrc: lgTanzendeB, alt: "Tanzende b", title: "", year: "", dimensions: "", groupId: "tanzende", img: { w: 304, h: 600, top: 2610, left: 458 } },
  { id: 8, smallSrc: smSonnenblumen, largeSrc: lgSonnenblumen, alt: "Sonnenblumen", title: "Sonnenblumen", year: "2021", dimensions: "100 x 80 cm", img: { w: 797, h: 524, top: 3283, left: 608 }, caption: { w: 196, top: 3420, left: 350, align: "right" } },
  { id: 9, smallSrc: smKuechenphilosophie, largeSrc: lgKuechenphilosophie, alt: "Küchenphilosophie", title: "Küchenphilosophie", year: "2022", dimensions: "100 x 100 cm", img: { w: 497, h: 494, top: 3646, left: 68 }, caption: { w: 196, top: 3942, left: 575 } },
  { id: 10, smallSrc: smOhneTitelA, largeSrc: lgOhneTitelA, alt: "ohne Titel", title: "ohne Titel", year: "2024", dimensions: "je 80 x 40 cm", groupId: "ohne-titel-diptych", img: { w: 301, h: 600, top: 4170, left: 1089 }, caption: { w: 196, top: 4299, left: 467, align: "right" } },
  { id: 11, smallSrc: smOhneTitelB, largeSrc: lgOhneTitelB, alt: "ohne Titel b", title: "", year: "", dimensions: "", groupId: "ohne-titel-diptych", img: { w: 299, h: 600, top: 4170, left: 749 } },
  { id: 12, smallSrc: smAufbruchII, largeSrc: lgAufbruchII, alt: "Aufbruch II", title: "Aufbruch II", year: "2024", dimensions: "100 x 100 cm", img: { w: 781, h: 782, top: 4800, left: 26 }, caption: { w: 196, top: 5275, left: 965 } },
  { id: 13, smallSrc: smOhneTitel1, largeSrc: lgOhneTitel1, alt: "ohne Titel 1", title: "ohne Titel", year: "2025", dimensions: "120 x 100 cm", img: { w: 904, h: 600, top: 5612, left: 524 }, caption: { w: 196, top: 6016, left: 302, align: "right" } },
  { id: 14, smallSrc: smSpuren, largeSrc: lgSpuren, alt: "Spuren", title: "Spuren", year: "2022", dimensions: "100 x 100 cm", img: { w: 776, h: 781, top: 6300, left: 333 }, caption: { w: 196, top: 6415, left: 1173 } }
];

export function DesktopDark(): JSX.Element {
  const [isPreviewOpen, setIsPreviewOpen] = useState(false);
  const [currentIndex, setCurrentIndex] = useState(0);
  const headerContainerRef = useRef<HTMLDivElement | null>(null);
  const kontaktRef = useRef<HTMLAnchorElement | null>(null);
  const [langLeft, setLangLeft] = useState<number>(0);

  const openPreview = useCallback((index: number) => {
    setCurrentIndex(index);
    setIsPreviewOpen(true);
  }, []);

  const closePreview = useCallback(() => {
    setIsPreviewOpen(false);
  }, []);

  const showPrev = useCallback(() => {
    setCurrentIndex((i) => (i - 1 + artworks.length) % artworks.length);
  }, []);

  const showNext = useCallback(() => {
    setCurrentIndex((i) => (i + 1) % artworks.length);
  }, []);

  // Lock background scroll when preview is open & add keyboard controls (restore previous behavior)
  useEffect(() => {
    if (isPreviewOpen) {
      const onKey = (e: KeyboardEvent) => {
        if (e.key === "Escape") closePreview();
        if (e.key === "ArrowLeft") showPrev();
        if (e.key === "ArrowRight") showNext();
      };
      document.addEventListener("keydown", onKey);
      const prevOverflow = document.body.style.overflow;
      document.body.style.overflow = "hidden";
      return () => {
        document.removeEventListener("keydown", onKey);
        document.body.style.overflow = prevOverflow;
      };
    }
  }, [isPreviewOpen, closePreview, showPrev, showNext]);

  useEffect(() => {
    const onKey = (e: KeyboardEvent) => {
      if (!isPreviewOpen) return;
      if (e.key === "Escape") closePreview();
      if (e.key === "ArrowLeft") showPrev();
      if (e.key === "ArrowRight") showNext();
    };
    // keep existing global listener removal behavior in case other code depends on it
    document.addEventListener("keydown", onKey);
    return () => document.removeEventListener("keydown", onKey);
  }, [isPreviewOpen, closePreview, showPrev, showNext]);

  // Compute language label position (centered over "Kontakt") — restore previous behavior
  useEffect(() => {
    const update = () => {
      const kontakt = kontaktRef.current;
      const container = headerContainerRef.current;
      if (!kontakt || !container) return;
      const kRect = kontakt.getBoundingClientRect();
      const cRect = container.getBoundingClientRect();
      const center = kRect.left - cRect.left + kRect.width / 2;
      setLangLeft(center);
    };
    update();
    window.addEventListener("resize", update);
    return () => window.removeEventListener("resize", update);
  }, []);

  // current will be accessed inside the lightbox IIFE as needed

  return (
    <main>
      {/* Language bar (top, non-sticky) */}
      <div className="w-full">
        <div className="container mx-auto relative h-7 px-4">
          <div
            className="absolute top-1/2 -translate-y-1/2 [font-family:'Antonio',Helvetica] text-[16px] font-thin leading-none text-black"
            style={{ left: langLeft, transform: "translate(-50%, -50%)" }}
          >
            <a href="#de" className="hover:underline">de</a>
            <span className="px-1">|</span>
            <a href="#en" className="hover:underline">en</a>
          </div>
        </div>
      </div>

      {/* Sticky Navigation Bar to match other pages */}
      <header className="sticky top-0 z-50 bg-[#af8f5b] shadow">
        <div ref={headerContainerRef} className="container mx-auto flex h-24 items-center justify-between px-6">
          <h1 className="[font-family:'Antonio',Helvetica] text-white text-5xl md:text-6xl tracking-[-0.02em] leading-none">
            <NavLink to="/" className="hover:opacity-90" aria-label="Zur Startseite">Sabine Hansen</NavLink>
          </h1>
          <nav className="flex items-center gap-[72px] [font-family:'Antonio',Helvetica]">
            {navLinks.map((l) => (
              <NavLink key={l.href} to={l.href} ref={l.label === 'Kontakt' ? (kontaktRef as any) : undefined} className={({ isActive }) => ["text-[16px] font-thin px-0", "hover:text-[#854686] hover:bg-transparent", isActive ? "text-[#854686]" : "text-white"].join(" ")}>
                {l.label}
              </NavLink>
            ))}
          </nav>
        </div>
      </header>

      <div className="relative" style={{ width: 1440, height: 7700, marginTop: -124, marginLeft: "auto", marginRight: "auto" }} aria-label="Galerie">
        {artworks.map((artwork, idx) => (
          <figure key={artwork.id} className="absolute" style={{ top: artwork.img.top, left: artwork.img.left, width: artwork.img.w, height: artwork.img.h }}>
            <picture>
              <source srcSet={artwork.smallSrc} type="image/webp" />
              {/* webp-only: smallSrc for page rendering */}
              <img src={artwork.smallSrc} alt={artwork.alt} className="w-full h-full object-cover cursor-pointer" loading="lazy" onClick={() => openPreview(idx)} />
            </picture>
          </figure>
        ))}

        {/* Captions (title, year, dimensions) — restore multi-line details */}
        {artworks.map((artwork) =>
          artwork.caption ? (
            <div
              key={`cap-${artwork.id}`}
              className="absolute [font-family:'Antonio',Helvetica] text-black text-base leading-[120%] z-20"
              style={{ top: artwork.caption.top, left: artwork.caption.left, width: artwork.caption.w ?? 196, textAlign: artwork.caption.align === "right" ? "right" : "left" }}
            >
              <div className="font-normal">{artwork.title}</div>
              <div className="font-thin">{artwork.year}</div>
              <div className="font-thin">{artwork.dimensions}</div>
            </div>
          ) : null
        )}

        <ContactSection className="absolute" style={{ width: 560, top: 7205, left: "50%", transform: "translateX(-50%)" }} />
        <FooterBar className="absolute" style={{ width: 430, top: 7653, left: 20 }} />
      </div>

      {/* Lightbox preview */}
      {isPreviewOpen && (
        <div role="dialog" aria-modal="true" className="fixed inset-0 z-[100] bg-[#D3CCC3]">
          {/* Close button */}
          <button aria-label="Close preview" onClick={closePreview} className="absolute top-2 right-6 md:right-10 w-16 h-16 md:w-20 md:h-20 flex items-center justify-center text-5xl md:text-7xl leading-none text-black hover:text-[#854686] focus:outline-none transition-colors">
            ×
          </button>

          {/* Navigation arrows */}
          <button aria-label="Previous image" onClick={showPrev} className="absolute left-4 md:left-10 top-1/2 -translate-y-1/2 w-14 h-14 md:w-20 md:h-20 flex items-center justify-center text-4xl md:text-6xl text-black hover:text-[#854686] select-none transition-colors">
            {'<'}
          </button>
          <button aria-label="Next image" onClick={showNext} className="absolute right-4 md:right-10 top-1/2 -translate-y-1/2 w-14 h-14 md:w-20 md:h-20 flex items-center justify-center text-4xl md:text-6xl text-black hover:text-[#854686] select-none transition-colors">
            {'>'}
          </button>

          {/* Content */}
          <div className="h-full w-full flex flex-col items-center justify-center px-4 md:px-8">
            {(() => {
              const cur = artworks[currentIndex];
              const group = cur.groupId ? artworks.filter((a) => a.groupId === cur.groupId) : null;

              if (group && group.length > 1) {
                return (
                  <>
                    <div className="flex items-center justify-center gap-4 md:gap-8 w-full">
                      {group.map((a) => (
                        <picture key={a.id}>
                          <source srcSet={a.largeSrc} type="image/webp" />
                          <img src={a.largeSrc} alt={a.alt} className="max-w-[40vw] max-h-[70vh] md:max-w-[35vw] md:max-h-[72vh] object-contain" />
                        </picture>
                      ))}
                    </div>
                    {(() => {
                      const main = group.find((a) => (a.title ?? "").trim().length > 0) ?? group[0];
                      const mainTitle = (main.title || main.alt) ?? "";
                      return (
                        <div className="mt-4 md:mt-6 text-center [font-family:'Antonio',Helvetica] text-black text-lg md:text-xl">
                          {mainTitle}
                        </div>
                      );
                    })()}
                  </>
                );
              }

              return (
                <>
                  <picture>
                    <source srcSet={cur.largeSrc} type="image/webp" />
                    <img src={cur.largeSrc} alt={cur.alt} className="max-w-[90vw] max-h-[70vh] md:max-w-[72vw] md:max-h-[72vh] object-contain" />
                  </picture>
                  <div className="mt-4 md:mt-6 text-center [font-family:'Antonio',Helvetica] text-black text-lg md:text-xl">
                    {(cur.title || cur.alt) ?? ""}
                  </div>
                </>
              );
            })()}
          </div>
        </div>
      )}
    </main>
  );
}
