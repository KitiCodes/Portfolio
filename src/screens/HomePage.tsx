import { useCallback, useEffect, useRef, useState, useMemo, type TouchEvent } from "react";
import { ContactSection } from "../components/ContactSection";
import ContactSectionMobile from "../components/ContactSectionMobile";

// Optimized WebP: small and large (generated by scripts/optimize-with-sharp.mjs)
import smAufbruchI from "../assets/optimized/sm/AufbruchI-web.webp";
import lgAufbruchI from "../assets/optimized/lg/AufbruchI-web.webp";
import smAufbruchII from "../assets/optimized/sm/AufbruchII-web.webp";
import lgAufbruchII from "../assets/optimized/lg/AufbruchII-web.webp";
import smEismeer from "../assets/optimized/sm/Eismeer-web.webp";
import lgEismeer from "../assets/optimized/lg/Eismeer-web.webp";
import smFruehling from "../assets/optimized/sm/Fruehling-web.webp";
import lgFruehling from "../assets/optimized/lg/Fruehling-web.webp";
import smKuechenphilosophie from "../assets/optimized/sm/Küchenphilosophie-web.webp";
import lgKuechenphilosophie from "../assets/optimized/lg/Küchenphilosophie-web.webp";
import smOhneTitelA from "../assets/optimized/sm/ohneTitel-a-web.webp";
import lgOhneTitelA from "../assets/optimized/lg/ohneTitel-a-web.webp";
import smOhneTitel1 from "../assets/optimized/sm/ohneTitel1-web.webp";
import lgOhneTitel1 from "../assets/optimized/lg/ohneTitel1-web.webp";
import smOhneTitelB from "../assets/optimized/sm/ohneTitelb-web.webp";
import lgOhneTitelB from "../assets/optimized/lg/ohneTitelb-web.webp";
import smPower from "../assets/optimized/sm/power-web.webp";
import lgPower from "../assets/optimized/lg/power-web.webp";
import smSonnenblumen from "../assets/optimized/sm/Sonnenblumen-web.webp";
import lgSonnenblumen from "../assets/optimized/lg/Sonnenblumen-web.webp";
import smSpuren from "../assets/optimized/sm/Spuren-web.webp";
import lgSpuren from "../assets/optimized/lg/Spuren-web.webp";
import smTanzendeA from "../assets/optimized/sm/Tanzende-a-web.webp";
import lgTanzendeA from "../assets/optimized/lg/Tanzende-a-web.webp";
import smTanzendeB from "../assets/optimized/sm/Tanzende-b-web.webp";
import lgTanzendeB from "../assets/optimized/lg/Tanzende-b-web.webp";
import smZaghaft from "../assets/optimized/sm/Zaghaft-beginnt-etwas-Neues-web.webp";
import lgZaghaft from "../assets/optimized/lg/Zaghaft-beginnt-etwas-Neues-web.webp";

// navLinks handled by SiteHeader

type Artwork = {
  id: number;
  smallSrc: string; // webp small variant for page
  largeSrc: string; // webp large variant for lightbox
  alt: string;
  title: string;
  year: string;
  dimensions: string;
  groupId?: string;
  img: { w: number; h: number; top: number; left: number };
  caption?: { w?: number; top: number; left: number; align?: "right" | "left" };
};

const artworks: Artwork[] = [
  // Restore the vertical position of the first artwork so it sits closer to the header like before
  { id: 1, smallSrc: smAufbruchI, largeSrc: lgAufbruchI, alt: "Aufbruch I", title: "Aufbruch I", year: "2022", dimensions: "70 x 60 cm", img: { w: 706, h: 600, top: 232, left: 31 }, caption: { w: 196, top: 316, left: 812 } },
  { id: 2, smallSrc: smFruehling, largeSrc: lgFruehling, alt: "Frühling", title: "Frühling", year: "2020", dimensions: "70 x 70 cm", img: { w: 491, h: 486, top: 647, left: 918 }, caption: { w: 196, top: 965, left: 704, align: "right" } },
  { id: 3, smallSrc: smEismeer, largeSrc: lgEismeer, alt: "Eismeer", title: "Eismeer", year: "2020", dimensions: "80 x 40 cm", img: { w: 1202, h: 600, top: 1166, left: 68 }, caption: { w: 196, top: 1409, left: 1291 } },
  { id: 4, smallSrc: smZaghaft, largeSrc: lgZaghaft, alt: "Zaghaft beginnt etwas Neues", title: "Zaghaft beginnt etwas Neues", year: "2021", dimensions: "70 x 70 cm", img: { w: 511, h: 499, top: 1839, left: 13 }, caption: { w: 196, top: 1918, left: 566 } },
  { id: 5, smallSrc: smPower, largeSrc: lgPower, alt: "power", title: "power", year: "2021", dimensions: "70 x 70 cm", img: { w: 566, h: 600, top: 2010, left: 843 }, caption: { w: 196, top: 2435, left: 639, align: "right" } },
  { id: 6, smallSrc: smTanzendeA, largeSrc: lgTanzendeA, alt: "Tanzende", title: "Tanzende", year: "2024", dimensions: "je 80 x 40 cm", groupId: "tanzende", img: { w: 297, h: 600, top: 2610, left: 120 }, caption: { w: 196, top: 2840, left: 861 } },
    { id: 7, smallSrc: smTanzendeB, largeSrc: lgTanzendeB, alt: "Tanzende b", title: "", year: "", dimensions: "", groupId: "tanzende", img: { w: 297, h: 600, top: 2610, left: 417 } },
  { id: 8, smallSrc: smSonnenblumen, largeSrc: lgSonnenblumen, alt: "Sonnenblumen", title: "Sonnenblumen", year: "2021", dimensions: "100 x 80 cm", img: { w: 797, h: 524, top: 3283, left: 608 }, caption: { w: 196, top: 3420, left: 350, align: "right" } },
  { id: 9, smallSrc: smKuechenphilosophie, largeSrc: lgKuechenphilosophie, alt: "Küchenphilosophie", title: "Küchenphilosophie", year: "2022", dimensions: "100 x 100 cm", img: { w: 497, h: 494, top: 3646, left: 68 }, caption: { w: 196, top: 3942, left: 575 } },
  { id: 10, smallSrc: smOhneTitelA, largeSrc: lgOhneTitelA, alt: "ohne Titel", title: "ohne Titel", year: "2024", dimensions: "je 80 x 40 cm", groupId: "ohne-titel-diptych", img: { w: 301, h: 600, top: 4170, left: 1089 }, caption: { w: 196, top: 4299, left: 467, align: "right" } },
  { id: 11, smallSrc: smOhneTitelB, largeSrc: lgOhneTitelB, alt: "ohne Titel b", title: "", year: "", dimensions: "", groupId: "ohne-titel-diptych", img: { w: 299, h: 600, top: 4170, left: 790 } },
  { id: 12, smallSrc: smAufbruchII, largeSrc: lgAufbruchII, alt: "Aufbruch II", title: "Aufbruch II", year: "2024", dimensions: "100 x 100 cm", img: { w: 781, h: 782, top: 4800, left: 26 }, caption: { w: 196, top: 5275, left: 965 } },
  { id: 13, smallSrc: smOhneTitel1, largeSrc: lgOhneTitel1, alt: "ohne Titel 1", title: "ohne Titel", year: "2025", dimensions: "120 x 100 cm", img: { w: 904, h: 600, top: 5612, left: 524 }, caption: { w: 196, top: 6016, left: 302, align: "right" } },
  { id: 14, smallSrc: smSpuren, largeSrc: lgSpuren, alt: "Spuren", title: "Spuren", year: "2022", dimensions: "100 x 100 cm", img: { w: 776, h: 781, top: 6300, left: 333 }, caption: { w: 196, top: 6415, left: 1173 } }
];

export function HomePage(): JSX.Element {
  const [isMobile, setIsMobile] = useState(() => (typeof window !== "undefined" ? window.innerWidth <= 768 : false));

  useEffect(() => {
    if (typeof window === "undefined") return;
    const onResize = () => setIsMobile(window.innerWidth <= 768);
    window.addEventListener("resize", onResize);
    return () => window.removeEventListener("resize", onResize);
  }, []);

  // Mobile rendering inlined to avoid separate file
  if (isMobile) {
    // Mobile-only imports and state
    const [isPreviewOpenMobile, setIsPreviewOpenMobile] = useState(false);
    const [currentIndexMobile, setCurrentIndexMobile] = useState(0);
    const closeBtnRef = useRef<HTMLButtonElement | null>(null);
    const touchStartX = useRef<number | null>(null);
    const isPinching = useRef<boolean>(false);
    const stackingRef = useRef<HTMLDivElement | null>(null);
    const [stackHeight, setStackHeight] = useState<number>(3200);

    useEffect(() => {
      const el = stackingRef.current;
      if (!el) return;
      const update = () => {
        const parentRect = el.getBoundingClientRect();
        const descendants = Array.from(el.querySelectorAll("*")) as HTMLElement[];
        let max = 0;
        descendants.forEach((ch) => {
          const rect = ch.getBoundingClientRect();
          const bottom = rect.bottom - parentRect.top;
          if (bottom > max) max = bottom;
        });
        const value = Math.max(800, Math.ceil(max + 24));
        setStackHeight(value);
      };
      const RO = new (window as any).ResizeObserver(update);
      RO.observe(el);
      const imgs = el.querySelectorAll("img");
      imgs.forEach((i) => i.addEventListener("load", update));
      window.addEventListener("resize", update);
      setTimeout(update, 50);
      return () => {
        RO.disconnect();
        imgs.forEach((i) => i.removeEventListener("load", update));
        window.removeEventListener("resize", update);
      };
    }, []);

    const openPreviewMobile = useCallback((index: number) => {
      setCurrentIndexMobile(index);
      setIsPreviewOpenMobile(true);
    }, []);

    const closePreviewMobile = useCallback(() => setIsPreviewOpenMobile(false), []);
    const showPrevMobile = useCallback(() => setCurrentIndexMobile((i) => (i - 1 + artworks.length) % artworks.length), []);
    const showNextMobile = useCallback(() => setCurrentIndexMobile((i) => (i + 1) % artworks.length), []);

    useEffect(() => {
      if (!isPreviewOpenMobile) return;
      const onKey = (e: KeyboardEvent) => {
        if (e.key === "Escape") closePreviewMobile();
        if (e.key === "ArrowLeft") showPrevMobile();
        if (e.key === "ArrowRight") showNextMobile();
      };
      document.addEventListener("keydown", onKey);
      const prev = document.body.style.overflow;
      document.body.style.overflow = "hidden";
      return () => {
        document.removeEventListener("keydown", onKey);
        document.body.style.overflow = prev;
      };
    }, [isPreviewOpenMobile, closePreviewMobile, showPrevMobile, showNextMobile]);

    const onTouchStart = (e: TouchEvent) => {
      if (e.touches.length > 1) {
        isPinching.current = true;
      } else {
        isPinching.current = false;
        touchStartX.current = e.touches[0].clientX;
      }
    };
    const onTouchEnd = (e: TouchEvent) => {
      if (isPinching.current) {
        isPinching.current = false;
        touchStartX.current = null;
        return;
      }
      if (touchStartX.current == null) return;
      const dx = e.changedTouches[0].clientX - touchStartX.current;
      if (dx > 50) showPrevMobile();
      if (dx < -50) showNextMobile();
      touchStartX.current = null;
    };

    const groups = useMemo(() => {
      const map = new Map<string, number[]>();
      artworks.forEach((a, idx) => {
        if (a.groupId) {
          const arr = map.get(a.groupId) ?? [];
          arr.push(idx);
          map.set(a.groupId, arr);
        }
      });
      return map;
    }, []);

    return (
      <div className="bg-[#d4cdc4] grid justify-items-center [align-items:start] w-screen overflow-x-hidden">
        <div className="bg-[#d4cdc4] w-[390px] relative overflow-x-hidden">
          <div ref={stackingRef} className="relative w-full pt-2" style={{ minHeight: stackHeight }}>
            <div className="relative">
              {/* Mobile layout: explicit absolute classes taken from the original mobile markup */}
              {(
                [
                  { id: 1, imageClass: "absolute w-[278px] h-[236px] top-[75px] left-[13px] object-cover cursor-pointer", textClass: "absolute top-[95px] left-[311px] w-[79px] [font-family:'Antonio',Helvetica] font-normal text-black text-base tracking-[-0.32px] leading-[19.2px] text-left" },
                  { id: 2, imageClass: "absolute w-[247px] h-[244px] top-[353px] left-[137px] object-cover cursor-pointer", textClass: "absolute w-14 top-[497px] left-[68px] [font-family:'Antonio',Helvetica] font-normal text-black text-base text-right tracking-[-0.32px] leading-[19.2px]" },
                  { id: 3, imageClass: "absolute w-[315px] h-[157px] top-[609px] left-0 object-cover cursor-pointer", textClass: "absolute w-[66px] top-[654px] left-[324px] [font-family:'Antonio',Helvetica] font-normal text-black text-base tracking-[-0.32px] leading-[19.2px]" },
                  { id: 4, imageClass: "absolute w-[313px] h-[306px] top-[801px] left-[11px] object-cover cursor-pointer", textClass: "absolute w-[90px] top-[1115px] left-[323px] [font-family:'Antonio',Helvetica] font-normal text-black text-base tracking-[-0.32px] leading-[19.2px]" },
                  { id: 5, imageClass: "absolute w-[302px] h-80 top-[1127px] left-[82px] object-cover cursor-pointer", textClass: "absolute w-14 top-[1210px] left-[11px] [font-family:'Antonio',Helvetica] font-normal text-black text-base text-right tracking-[-0.32px] leading-[19.2px]" },
                  { id: 6, imageClass: "absolute w-[135px] h-[272px] top-[1473px] left-[11px] object-contain cursor-pointer", textClass: "absolute w-[90px] top-[1648px] left-[301px] [font-family:'Antonio',Helvetica] font-normal text-black text-base tracking-[-0.32px] leading-[19.2px]" },
                  { id: 7, imageClass: "absolute w-[138px] h-[272px] top-[1473px] left-[154px] object-contain cursor-pointer", textClass: null },
                  { id: 8, imageClass: "absolute w-[290px] h-[194px] top-[1753px] left-[100px] object-cover cursor-pointer", textClass: "absolute w-[85px] top-[1780px] left-[11px] [font-family:'Antonio',Helvetica] font-normal text-black text-base text-right tracking-[-0.32px] leading-[19.2px]" },
                  { id: 9, imageClass: "absolute w-[254px] h-[252px] top-[1961px] left-[5px] object-cover cursor-pointer", textClass: "absolute w-[108px] top-[2095px] left-[271px] [font-family:'Antonio',Helvetica] font-normal text-black text-base tracking-[-0.32px] leading-[19.2px]" },
                  { id: 10, imageClass: "absolute w-[131px] h-[261px] top-[2243px] left-[254px] object-contain cursor-pointer", textClass: "absolute top-[2379px] left-[19px] [font-family:'Antonio',Helvetica] font-normal text-black text-base text-right tracking-[-0.32px] leading-[19.2px]" },
                  { id: 11, imageClass: "absolute w-[130px] h-[261px] top-[2243px] left-[121px] object-contain cursor-pointer", textClass: null },
                  { id: 12, imageClass: "absolute w-[276px] h-[276px] top-[2530px] left-0 object-cover cursor-pointer", textClass: "absolute top-[2617px] left-[295px] w-[95px] [font-family:'Antonio',Helvetica] font-normal text-black text-base tracking-[-0.32px] leading-[19.2px]" },
                  { id: 13, imageClass: "absolute w-[286px] h-[190px] top-[2814px] left-[88px] object-cover cursor-pointer", textClass: "absolute w-[69px] top-[2832px] left-[11px] [font-family:'Antonio',Helvetica] font-normal text-black text-base text-right tracking-[-0.32px] leading-[19.2px]" },
                  { id: 14, imageClass: "absolute w-[281px] h-[283px] top-[3034px] left-[11px] object-cover cursor-pointer", textClass: "absolute w-[69px] top-[3167px] left-[306px] [font-family:'Antonio',Helvetica] font-normal text-black text-base tracking-[-0.32px] leading-[19.2px]" }
                ]
              ).map((item) => {
                const artIndex = artworks.findIndex((a) => a.id === item.id);
                const art = artworks[artIndex];
                return (
                  <div key={item.id}>
                    <img className={item.imageClass} alt={art.alt} src={art.smallSrc} loading="lazy" onClick={() => openPreviewMobile(artIndex)} />
                    {item.textClass && art.title && (
                      <div className={item.textClass}>
                        <span className="tracking-[-0.05px]">{art.title}<br /></span>
                        <span className="font-thin tracking-[-0.05px]">{art.year}<br />{art.dimensions}<br /></span>
                      </div>
                    )}
                  </div>
                );
              })}
            </div>
          </div>

          <div className="w-full flex flex-col items-start">
            <ContactSectionMobile className="mt-6 w-full" />
          </div>

          {isPreviewOpenMobile && (
            <div role="dialog" aria-modal="true" className="fixed inset-0 z-[100] bg-[#d4cdc4] flex items-center justify-center overflow-hidden" onTouchStart={onTouchStart} onTouchEnd={onTouchEnd} onClick={(e) => { if (e.target === e.currentTarget) closePreviewMobile(); }}>
              <button ref={closeBtnRef} aria-label="Close preview" onClick={closePreviewMobile} className="absolute top-4 right-4 w-12 h-12 flex items-center justify-center text-3xl text-black z-20">×</button>
              <div className="relative w-full h-full flex items-center justify-center px-3 pb-12">
                {(() => {
                  const cur = artworks[currentIndexMobile] as any;
                  const groupIdxs = cur.groupId ? groups.get(cur.groupId) : null;
                  if (groupIdxs && groupIdxs.length > 1) {
                    const group = groupIdxs.map((i) => artworks[i]);
                    const main = group.find((a) => (a.title ?? "").trim().length > 0) ?? group[0];
                    return (
                      <div className="flex flex-col items-center gap-4">
                        <div className="flex gap-2 items-center justify-center">
                            {group.map((a) => (
                            <img key={a.id} src={(a as any).largeSrc ?? (a as any).large} alt={a.alt || a.title || 'Artwork'} className="h-[60vh] w-auto object-contain mx-auto" />
                          ))}
                        </div>
                        <div className="relative w-full [font-family:'Antonio',Helvetica] text-black text-lg">
                          <button aria-label="Previous image" onClick={showPrevMobile} className="absolute left-0 top-0 h-full px-3 flex items-center justify-center text-[32px] md:text-4xl text-inherit leading-none select-none bg-transparent border-0 p-0 m-0 appearance-none">‹</button>
                          <span className="absolute left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2 text-center">{(main.title || main.alt) ?? ""}</span>
                          <button aria-label="Next image" onClick={showNextMobile} className="absolute right-0 top-0 h-full px-3 flex items-center justify-center text-[32px] md:text-4xl text-inherit leading-none select-none bg-transparent border-0 p-0 m-0 appearance-none">›</button>
                        </div>
                      </div>
                    );
                  }

                  return (
                    <div className="flex flex-col items-center">
                      <img src={(cur as any).largeSrc ?? (cur as any).large} alt={cur.alt || cur.title || 'Artwork'} className="max-w-[92vw] max-h-[72vh] object-contain mx-auto" />
                      <div className="mt-3 relative w-full [font-family:'Antonio',Helvetica] text-black text-lg">
                        <button aria-label="Previous image" onClick={showPrevMobile} className="absolute left-0 top-0 h-full px-3 flex items-center justify-center text-[32px] md:text-4xl text-inherit leading-none select-none bg-transparent border-0 p-0 m-0 appearance-none">‹</button>
                        <span className="absolute left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2 text-center">{(cur.title || cur.alt) ?? ""}</span>
                        <button aria-label="Next image" onClick={showNextMobile} className="absolute right-0 top-0 h-full px-3 flex items-center justify-center text-[32px] md:text-4xl text-inherit leading-none select-none bg-transparent border-0 p-0 m-0 appearance-none">›</button>
                      </div>
                    </div>
                  );
                })()}
              </div>
            </div>
          )}
        </div>
      </div>
    );
  }
  const [isPreviewOpen, setIsPreviewOpen] = useState(false);
  const [currentIndex, setCurrentIndex] = useState(0);

  const openPreview = useCallback((index: number) => {
    setCurrentIndex(index);
    setIsPreviewOpen(true);
  }, []);

  const closePreview = useCallback(() => {
    setIsPreviewOpen(false);
  }, []);

  const showPrev = useCallback(() => {
    setCurrentIndex((i) => (i - 1 + artworks.length) % artworks.length);
  }, []);

  const showNext = useCallback(() => {
    setCurrentIndex((i) => (i + 1) % artworks.length);
  }, []);

  // Lock background scroll when preview is open & add keyboard controls (restore previous behavior)
  useEffect(() => {
    if (isPreviewOpen) {
      const onKey = (e: KeyboardEvent) => {
        if (e.key === "Escape") closePreview();
        if (e.key === "ArrowLeft") showPrev();
        if (e.key === "ArrowRight") showNext();
      };
      document.addEventListener("keydown", onKey);
      const prevOverflow = document.body.style.overflow;
      document.body.style.overflow = "hidden";
      return () => {
        document.removeEventListener("keydown", onKey);
        document.body.style.overflow = prevOverflow;
      };
    }
  }, [isPreviewOpen, closePreview, showPrev, showNext]);

  useEffect(() => {
    const onKey = (e: KeyboardEvent) => {
      if (!isPreviewOpen) return;
      if (e.key === "Escape") closePreview();
      if (e.key === "ArrowLeft") showPrev();
      if (e.key === "ArrowRight") showNext();
    };
    // keep existing global listener removal behavior in case other code depends on it
    document.addEventListener("keydown", onKey);
    return () => document.removeEventListener("keydown", onKey);
  }, [isPreviewOpen, closePreview, showPrev, showNext]);

  // Header language bar is now handled globally; remove per-page calculations.

  // current will be accessed inside the lightbox IIFE as needed

  return (
    <main>
      {/* TopLanguageBar provided globally; SiteHeader will be sticky below it */}

  <div className="relative w-full max-w-[1440px] mx-auto" style={{ height: 7700, marginTop: 0, paddingTop: 0 }} aria-label="Galerie">
        {artworks.map((artwork, idx) => (
          <figure key={artwork.id} className="relative w-full lg:absolute lg:overflow-visible" style={{ ...(typeof window === 'undefined' ? {} : {}), ...(artwork.img ? {} : {}) }}>
            {/* On large screens we position the artwork absolutely using inline style via lg media query in CSS is not available here; use Tailwind helpers above */}
            <div className="lg:absolute" style={{ top: artwork.img.top, left: artwork.img.left, width: artwork.img.w, height: artwork.img.h }}>
            <picture>
              <source srcSet={artwork.smallSrc} type="image/webp" />
              {/* webp-only: smallSrc for page rendering */}
              <img src={artwork.smallSrc} alt={artwork.alt} className="w-full h-full object-cover cursor-pointer" loading="lazy" onClick={() => openPreview(idx)} />
            </picture>
            </div>
          </figure>
        ))}

        {/* Captions (title, year, dimensions) — restore multi-line details */}
  {artworks.map((artwork) =>
          artwork.caption ? (
            <div
              key={`cap-${artwork.id}`}
              className="[font-family:'Antonio',Helvetica] text-black text-base leading-[120%] z-20"
              style={{ top: artwork.caption.top, left: artwork.caption.left, width: artwork.caption.w ?? 196, textAlign: artwork.caption.align === "right" ? "right" : "left", position: 'absolute' }}
            >
              <div className="font-normal">{artwork.title}</div>
              <div className="font-thin">{artwork.year}</div>
              <div className="font-thin">{artwork.dimensions}</div>
            </div>
          ) : null
        )}

  <ContactSection className="relative lg:absolute w-full lg:w-[560px]" style={{ ...(typeof window === 'undefined' ? {} : {}), ...(typeof window === 'undefined' ? {} : {}) , top: 7205, left: "50%", transform: "translateX(-50%)" }} />
      </div>

      {/* Lightbox preview */}
      {isPreviewOpen && (
        <div role="dialog" aria-modal="true" className="fixed inset-0 z-[100] bg-[#D3CCC3]">
          {/* Close button */}
          <button aria-label="Close preview" onClick={closePreview} className="absolute top-2 right-6 md:right-10 w-16 h-16 md:w-20 md:h-20 flex items-center justify-center text-5xl md:text-7xl leading-none text-black hover:text-[#854686] focus:outline-none transition-colors">
            ×
          </button>

          {/* Navigation arrows */}
          <button aria-label="Previous image" onClick={showPrev} className="absolute left-0 top-0 h-full px-4 flex items-center justify-center text-4xl md:text-6xl text-black hover:text-[#854686] select-none transition-colors">
            {'<'}
          </button>
          <button aria-label="Next image" onClick={showNext} className="absolute right-0 top-0 h-full px-4 flex items-center justify-center text-4xl md:text-6xl text-black hover:text-[#854686] select-none transition-colors">
            {'>'}
          </button>

          {/* Content */}
          <div className="h-full w-full flex flex-col items-center justify-center px-4 md:px-8">
            {(() => {
              const cur = artworks[currentIndex];
              const group = cur.groupId ? artworks.filter((a) => a.groupId === cur.groupId) : null;

              if (group && group.length > 1) {
                return (
                  <>
                    <div className="flex items-center justify-center gap-4 md:gap-8 w-full">
                      {group.map((a) => (
                        <picture key={a.id}>
                          <source srcSet={a.largeSrc} type="image/webp" />
                          <img src={a.largeSrc} alt={a.alt} className="h-[70vh] w-auto md:h-[72vh] md:w-auto object-contain" />
                        </picture>
                      ))}
                    </div>
                    {(() => {
                      const main = group.find((a) => (a.title ?? "").trim().length > 0) ?? group[0];
                      const mainTitle = (main.title || main.alt) ?? "";
                      return (
                        <div className="mt-4 md:mt-6 text-center [font-family:'Antonio',Helvetica] text-black text-lg md:text-xl">
                          {mainTitle}
                        </div>
                      );
                    })()}
                  </>
                );
              }

              return (
                <>
                  <picture>
                    <source srcSet={cur.largeSrc} type="image/webp" />
                    <img src={cur.largeSrc} alt={cur.alt} className="max-w-[90vw] max-h-[70vh] md:max-w-[72vw] md:max-h-[72vh] object-contain" />
                  </picture>
                  <div className="mt-4 md:mt-6 text-center [font-family:'Antonio',Helvetica] text-black text-lg md:text-xl">
                    {(cur.title || cur.alt) ?? ""}
                  </div>
                </>
              );
            })()}
          </div>
        </div>
      )}
    </main>
  );
}
